// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/grpc/pb/grpc_pb.proto

package grpc_pb_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScannerSmartCardClient is the client API for ScannerSmartCard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannerSmartCardClient interface {
	// RegisterCardData performs registration card in db (info about card sends @openmind3d in RegistrateRequest.regData)
	RegisterCardData(ctx context.Context, in *RegistrateRequest, opts ...grpc.CallOption) (*RegistrateResponse, error)
	// GetCardData performs query on getting CardData from db (@openmind3d entered in GetDataRequest only object id)
	GetCardData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
}

type scannerSmartCardClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerSmartCardClient(cc grpc.ClientConnInterface) ScannerSmartCardClient {
	return &scannerSmartCardClient{cc}
}

func (c *scannerSmartCardClient) RegisterCardData(ctx context.Context, in *RegistrateRequest, opts ...grpc.CallOption) (*RegistrateResponse, error) {
	out := new(RegistrateResponse)
	err := c.cc.Invoke(ctx, "/grpc.ScannerSmartCard/RegisterCardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerSmartCardClient) GetCardData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/grpc.ScannerSmartCard/GetCardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerSmartCardServer is the server API for ScannerSmartCard service.
// All implementations must embed UnimplementedScannerSmartCardServer
// for forward compatibility
type ScannerSmartCardServer interface {
	// RegisterCardData performs registration card in db (info about card sends @openmind3d in RegistrateRequest.regData)
	RegisterCardData(context.Context, *RegistrateRequest) (*RegistrateResponse, error)
	// GetCardData performs query on getting CardData from db (@openmind3d entered in GetDataRequest only object id)
	GetCardData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	mustEmbedUnimplementedScannerSmartCardServer()
}

// UnimplementedScannerSmartCardServer must be embedded to have forward compatible implementations.
type UnimplementedScannerSmartCardServer struct {
}

func (UnimplementedScannerSmartCardServer) RegisterCardData(context.Context, *RegistrateRequest) (*RegistrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCardData not implemented")
}
func (UnimplementedScannerSmartCardServer) GetCardData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardData not implemented")
}
func (UnimplementedScannerSmartCardServer) mustEmbedUnimplementedScannerSmartCardServer() {}

// UnsafeScannerSmartCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerSmartCardServer will
// result in compilation errors.
type UnsafeScannerSmartCardServer interface {
	mustEmbedUnimplementedScannerSmartCardServer()
}

func RegisterScannerSmartCardServer(s grpc.ServiceRegistrar, srv ScannerSmartCardServer) {
	s.RegisterService(&ScannerSmartCard_ServiceDesc, srv)
}

func _ScannerSmartCard_RegisterCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerSmartCardServer).RegisterCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ScannerSmartCard/RegisterCardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerSmartCardServer).RegisterCardData(ctx, req.(*RegistrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerSmartCard_GetCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerSmartCardServer).GetCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ScannerSmartCard/GetCardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerSmartCardServer).GetCardData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScannerSmartCard_ServiceDesc is the grpc.ServiceDesc for ScannerSmartCard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScannerSmartCard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ScannerSmartCard",
	HandlerType: (*ScannerSmartCardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCardData",
			Handler:    _ScannerSmartCard_RegisterCardData_Handler,
		},
		{
			MethodName: "GetCardData",
			Handler:    _ScannerSmartCard_GetCardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/pb/grpc_pb.proto",
}
